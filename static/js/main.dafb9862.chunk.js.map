{"version":3,"sources":["Common/mylogos.png","List/List.module.css","BLL/ListReducer.jsx","BLL/redux-store.jsx","Common/StylesMaterial.js","List/ListMaping.jsx","List/List.jsx","List/ListContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","lists","idOfPost","postInList","ListReducer","state","action","type","newPost","length","newPostText","newLists","newList","index","task","filter","id","reducers","combineReducers","toDoList","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ButtonStyled","withStyles","root","background","borderRadius","border","color","height","padding","boxShadow","label","textTransform","Button","ButtonDeleteStyled","DeleteIcon","TextFieldStyled","margin","borderBottomColor","borderColor","TextField","ListMaping","props","useState","done","notChecked","Checked","editMode","setEditMode","post","setTask","useEffect","className","style","ul","cn","li","span","FormControlLabel","control","Checkbox","checked","onChange","e","target","setChecked","onDoubleClick","onBlur","updateTask","deactivateEditMode","autoFocus","currentTarget","value","IconButton","aria-label","onClick","removeToDoAC","fontSize","renderTextField","input","meta","touched","invalid","error","custom","placeholder","helperText","List","reduxForm","postsElement","map","p","key","changeToDone","changeIndex","addPostToList","handleSubmit","submitting","src","logo","alt","onSubmit","Field","component","name","disabled","connect","values","dispatch","reset","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.dafb9862.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mylogos.3ef1bba7.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"List_li__2JXXT\",\"ul\":\"List_ul__2Iprr\",\"logo\":\"List_logo__1b7Sl\",\"label\":\"List_label__1r1xI\",\"input\":\"List_input__39Dga\",\"submit\":\"List_submit__rRuSv\",\"span\":\"List_span__DR7jK\",\"done\":\"List_done__39dvZ\",\"delete\":\"List_delete__4VRRG\",\"index\":\"List_index__6EI6F\",\"post\":\"List_post__3SKfM\"};","const ADD_POST = \"ADD_POST\"\r\nconst REMOVE_TODO = 'REMOVE_TODO'\r\nconst UPDATE_TASK = 'UPDATE_TASK'\r\n\r\nlet initialState = {\r\n\r\n    lists: [\r\n        {\r\n            idOfPost: 1,\r\n            postInList: 'Task',\r\n        }\r\n    ],\r\n}\r\n\r\nlet ListReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                idOfPost: state.lists.length + 1,\r\n                postInList: action.newPostText,\r\n            }\r\n            return {...state, lists: [...state.lists, newPost]};\r\n        }\r\n        case UPDATE_TASK:\r\n\r\n            let newLists = [...state.lists];\r\n            let newList = {...newLists[action.index]};\r\n            newList.postInList = action.task;\r\n            newLists[action.index] = newList;\r\n            return {...state, lists: newLists};\r\n\r\n        case REMOVE_TODO: {\r\n\r\n            return {...state,\r\n                lists: [...state.lists.filter(newList => newList.idOfPost !== action.id)]};\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPostToList = (newPostText, id) => ({type: ADD_POST, newPostText, id})\r\nexport const removeToDoAC = (id) => ({type: REMOVE_TODO, id})\r\nexport const updateTask = (task, index) => ({type: UPDATE_TASK, task, index})\r\n\r\nexport default ListReducer;\r\n\r\n// case CHANGE_TO_DONE: {\r\n\r\n//     if(state.lists[action.id-1]['idOfPost'] === action.id){\r\n\r\n//       return {...state, lists: [...state.lists[action.id-1]['done'] = true ] };\r\n//     }\r\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport {compose} from 'redux';\r\nimport ListReducer from './ListReducer';\r\nimport {reducer as formReducer} from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n\r\n    toDoList: ListReducer,\r\n    form: formReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\nwindow.store = store;\r\nexport default store;\r\n","import Button from '@material-ui/core/Button';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nexport const ButtonStyled = withStyles({\r\n\r\n    root: {\r\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'white',\r\n        height: 48,\r\n        padding: '0 30px',\r\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\r\n    },\r\n    label: {\r\n        textTransform: 'capitalize',\r\n    },\r\n})(Button);\r\n\r\nexport const ButtonDeleteStyled = withStyles({\r\n    root: {\r\n        borderRadius: 3,\r\n        border: 0,\r\n        color: 'red',\r\n    },\r\n})(DeleteIcon);\r\n\r\nexport const TextFieldStyled = withStyles({\r\n    root: {\r\n        margin: '10px',\r\n        '& label.Mui-focused': {\r\n            color: 'red',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'red',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: 'red',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: 'yellow',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: 'green',\r\n            },\r\n        },\r\n    },\r\n})(TextField);","import React, {useState, useEffect} from 'react';\nimport style from './List.module.css'\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton';\nimport {ButtonDeleteStyled} from '../Common/StylesMaterial'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport 'fontsource-roboto';\nimport TextField from '@material-ui/core/TextField';\n\n\nlet ListMaping = ({index, ...props}) => {\n\n    let [notChecked, Checked] = useState(props.done);\n\n    const setChecked = (e) => {\n        Checked(e.target.checked)\n    }\n\n    const removeToDo = (id) => {\n        props.removeToDoAC(id)\n    }\n\n    let [editMode, setEditMode] = useState(false);\n    let [task, setTask] = useState(props.post);\n\n    useEffect(() => {\n        setTask(props.post)\n    }, [props.post])\n\n    let activateEditMode = () => {\n\n        setEditMode(true);\n    }\n\n    let deactivateEditMode = (task, index) => {\n\n        setEditMode(false);\n        props.updateTask(task, index)\n    }\n\n    let onTaskChange = (e) => {\n\n        setTask(e.currentTarget.value);\n    }\n\n    return <>\n\n        <ul className={style.ul}>\n            <li className={cn(style.li, {[style.done]: notChecked === true})}>\n      <span className={style.span}>\n      <FormControlLabel\n          control={<Checkbox checked={notChecked} onChange={(e) => setChecked(e)}/>}\n      />\n      <div className={style.index}>{index + 1}</div>\n      <div>\n            {!editMode &&\n            <span onDoubleClick={activateEditMode} className={style.post}>{props.post}</span>\n            }{editMode &&\n      <TextField id=\"standard-basic\" color={\"secondary\"} onBlur={() => deactivateEditMode(task, index)} autoFocus={true}\n                 onChange={onTaskChange} value={task}></TextField>\n      }\n   </div>\n      </span>\n                <IconButton aria-label=\"delete\" onClick={() => removeToDo(props.id)}>\n                    <ButtonDeleteStyled fontSize=\"small\"/>\n                </IconButton>\n            </li>\n        </ul>\n    </>\n}\n\nexport default ListMaping;","import React from 'react';\nimport style from './List.module.css'\nimport {Field, reduxForm} from 'redux-form'\nimport ListMaping from './ListMaping'\nimport {ButtonStyled} from '../Common/StylesMaterial'\nimport {TextFieldStyled} from '../Common/StylesMaterial'\nimport logo from '../Common/mylogos.png'\n\n\nconst renderTextField = ({label, input, meta: {touched, invalid, error}, ...custom}) => {\n\n    return (<TextFieldStyled\n            label={label}\n            placeholder={label}\n            error={touched && invalid}\n            helperText={touched && error}\n            {...input}\n            {...custom}\n        />\n    )\n}\n\nlet ListForm = (props) => {\n\n    let postsElement = props.lists.map((p, index) =>\n\n        <div key={p.idOfPost}>\n            <ListMaping index={index} post={p.postInList} id={p.idOfPost}\n                        done={p.done} changeToDone={props.changeToDone}\n                        changeIndex={props.changeIndex} removeToDoAC={props.removeToDoAC}\n                        addPostToList={props.addPostToList} updateTask={props.updateTask}\n            />\n        </div>\n    );\n\n    const {handleSubmit, submitting} = props;\n\n    return (\n        <div>\n            <div><img src={logo} alt={'logo'} className={style.logo}/></div>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label className={style.label}>Tasks to do:</label>\n                    {postsElement}\n\n                    <Field component={renderTextField} name={\"newPostText\"}\n                           id='custom-css-standard-input' label={'Your task'}/>\n                </div>\n                <ButtonStyled type=\"submit\" disabled={submitting}>ADD ITEM </ButtonStyled>\n            </form>\n        </div>\n    )\n}\n\nlet List = reduxForm({\n    form: 'newPostText',\n})(ListForm)\n\nexport default List;\n\n","import React from 'react';\r\nimport List from './List'\r\nimport {addPostToList, removeToDoAC, updateTask} from '../BLL/ListReducer'\r\nimport {connect} from 'react-redux'\r\nimport {reset} from \"redux-form\"\r\n\r\n\r\nexport const ListContainer = (props) => {\r\n\r\n    let submit = (values, dispatch,) => {\r\n\r\n        values.newPostText && props.addPostToList(values.newPostText)\r\n        dispatch(reset('newPostText'));\r\n    }\r\n\r\n    return <List lists={props.lists} addPostToList={props.addPostToList}\r\n                 removeToDoAC={props.removeToDoAC} newPostText={props.newPostText}\r\n                 onSubmit={submit} updateTask={props.updateTask}\r\n    />\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n\r\n    lists: state.toDoList.lists,\r\n    newPostText: state.toDoList.newPostText\r\n})\r\n\r\nexport default connect(mapStateToProps,\r\n    {addPostToList, removeToDoAC, updateTask})\r\n(ListContainer)\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux'\nimport store from '../src/BLL/redux-store'\nimport ListContainer from './List/ListContainer';\n\n\nfunction App(props) {\n\n    return (<>\n            <div className=\"App\">\n                <Provider store={store}>\n                    <header className=\"App-header\">\n                        <ListContainer/>\n                    </header>\n                </Provider>\n            </div>\n        </>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}