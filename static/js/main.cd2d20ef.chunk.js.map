{"version":3,"sources":["Common/mylogos.png","List/List.module.css","BLL/ListReducer.jsx","BLL/redux-store.jsx","Common/StylesMaterial.js","List/ListMaping.jsx","List/List.jsx","List/ListContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","initialState","lists","idOfPost","postInList","checked","setState","type","ListReducer","state","action","newPost","length","newPostText","localStorage","setItem","JSON","stringify","newLists","newList","index","task","newListsArr","newListObj","new_state","filter","id","getItem","reducers","combineReducers","toDoList","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ButtonStyled","withStyles","root","background","borderRadius","border","color","height","padding","margin","boxShadow","label","textTransform","Button","ButtonDeleteStyled","DeleteIcon","TextFieldStyled","borderBottomColor","borderColor","TextField","ListMaping","props","useState","editMode","setEditMode","post","setTask","useEffect","className","style","ul","cn","li","done","span","FormControlLabel","control","Checkbox","onChange","e","updateStatus","target","setChecked","onDoubleClick","onBlur","updateTask","deactivateEditMode","autoFocus","currentTarget","value","IconButton","aria-label","onClick","removeToDoAC","fontSize","renderTextField","input","meta","touched","invalid","error","custom","placeholder","helperText","List","reduxForm","postsElement","map","p","key","changeIndex","addPostToList","handleSubmit","submitting","src","logo","alt","onSubmit","Field","component","name","disabled","connect","dispatch","useDispatch","values","reset","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cd2d20ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/mylogos.3ef1bba7.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"List_li__3KhvA\",\"ul\":\"List_ul__3YEUV\",\"logo\":\"List_logo__1gKDW\",\"label\":\"List_label__1xLKF\",\"input\":\"List_input__2Jiui\",\"submit\":\"List_submit__36kKR\",\"span\":\"List_span__2j79O\",\"done\":\"List_done__2IqtG\",\"delete\":\"List_delete__u1H_O\",\"index\":\"List_index__1B74f\",\"post\":\"List_post__3o8e3\"};","const ADD_POST = \"ADD_POST\"\nconst REMOVE_TODO = 'REMOVE_TODO'\nconst UPDATE_TASK = 'UPDATE_TASK'\nconst SET_STATE = 'SET_STATE'\nconst UPDATE_STATUS = 'UPDATE_STATUS'\n\nlet initialState = {\n\n    lists: [\n        {\n            idOfPost: 1,\n            postInList: 'Task',\n            checked: false,\n        }\n    ],\n}\n\nlet ListReducer = (state = initialState, action) => {\n    switch (action.type) {\n\n        case ADD_POST: {\n\n            let newPost = {\n                idOfPost: state.lists.length + 1,\n                postInList: action.newPostText,\n                checked: false,\n            }\n            localStorage.setItem('todo', JSON.stringify({...state, lists: [...state.lists, newPost]}))\n            return {...state, lists: [...state.lists, newPost]};\n        }\n\n        case UPDATE_TASK:\n\n            let newLists = [...state.lists];\n            let newList = {...newLists[action.index]};\n            newList.postInList = action.task;\n            newLists[action.index] = newList;\n\n            localStorage.setItem('todo', JSON.stringify({...state, lists: newLists}))\n            return {...state, lists: newLists};\n\n        case UPDATE_STATUS:\n            let newListsArr = [...state.lists];\n            let newListObj = {...newListsArr[action.index]};\n            newListObj.checked = action.checked;\n            newListsArr[action.index] = newListObj;\n\n            localStorage.setItem('todo', JSON.stringify({...state, lists: newListsArr}))\n            return {...state, lists: newListsArr};\n\n        case REMOVE_TODO: {\n            const new_state ={ ...state,\n                lists: [...state.lists.filter(newList => newList.idOfPost !== action.id)]}\n            localStorage.setItem('todo', JSON.stringify(new_state))\n            return new_state;\n        }\n\n        case SET_STATE: {\n\n            const new_state = localStorage.getItem('todo')\n            if(new_state == null) {\n              return initialState\n            }\n            else{\n                return new_state\n            }\n        }\n        default:\n            return state;\n    }\n}\n\nexport const addPostToList = (newPostText, id) => ({type: ADD_POST, newPostText, id})\nexport const removeToDoAC = (id) => ({type: REMOVE_TODO, id})\nexport const updateTask = (task, index) => ({type: UPDATE_TASK, task, index})\nexport const updateStatus = (checked, index) => ({type: UPDATE_STATUS, checked, index})\nexport const setState = () => ({type: SET_STATE})\n\nexport default ListReducer;\n","import {createStore, combineReducers, applyMiddleware} from \"redux\";\nimport thunkMiddleware from 'redux-thunk';\nimport {compose} from 'redux';\nimport ListReducer from './ListReducer';\nimport {reducer as formReducer} from 'redux-form';\n\nlet reducers = combineReducers({\n\n    toDoList: ListReducer,\n    form: formReducer\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancers(applyMiddleware(thunkMiddleware)));\n\nwindow.store = store;\nexport default store;\n","import Button from '@material-ui/core/Button';\nimport {withStyles} from '@material-ui/core/styles';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport TextField from '@material-ui/core/TextField';\n\n\nexport const ButtonStyled = withStyles({\n\n    root: {\n        background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n        borderRadius: 3,\n        border: 0,\n        color: 'white',\n        height: 48,\n        padding: '0 30px',\n        margin: \"30px 0px\",\n        boxShadow: '0 3px 5px 2px rgba(255, 105, 135, .3)',\n    },\n    label: {\n        textTransform: 'capitalize',\n    },\n})(Button);\n\nexport const ButtonDeleteStyled = withStyles({\n    root: {\n        borderRadius: 3,\n        border: 0,\n        color: 'red',\n    },\n})(DeleteIcon);\n\nexport const TextFieldStyled = withStyles({\n    root: {\n        margin: '10px',\n        '& label.Mui-focused': {\n            color: 'red',\n        },\n        '& .MuiInput-underline:after': {\n            borderBottomColor: 'red',\n        },\n        '& .MuiOutlinedInput-root': {\n            '& fieldset': {\n                borderColor: 'red',\n            },\n            '&:hover fieldset': {\n                borderColor: 'yellow',\n            },\n            '&.Mui-focused fieldset': {\n                borderColor: 'green',\n            },\n        },\n    },\n})(TextField);","import React, {useState, useEffect} from 'react';\nimport style from './List.module.css'\nimport cn from 'classnames'\nimport IconButton from '@material-ui/core/IconButton';\nimport {ButtonDeleteStyled} from '../Common/StylesMaterial'\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport 'fontsource-roboto';\nimport TextField from '@material-ui/core/TextField';\n\n\nlet ListMaping = ({index, ...props}) => {\n\n    const setChecked = (e) => {\n        props.updateStatus(e.target.checked, index)\n    }\n\n    const removeToDo = (id) => {\n        props.removeToDoAC(id)\n    }\n\n    let [editMode, setEditMode] = useState(false);\n    let [task, setTask] = useState(props.post);\n\n    useEffect(() => {\n        setTask(props.post)\n    }, [props.post])\n\n    let activateEditMode = () => {\n\n        setEditMode(true);\n    }\n\n    let deactivateEditMode = (task, index) => {\n\n        setEditMode(false);\n        props.updateTask(task, index)\n    }\n\n    let onTaskChange = (e) => {\n\n        setTask(e.currentTarget.value);\n    }\n\n    return <>\n\n        <ul className={style.ul}>\n            <li className={cn(style.li, {[style.done]: props.checked === true})}>\n      <span className={style.span}>\n      <FormControlLabel\n          control={<Checkbox checked={props.checked} onChange={(e) => setChecked(e, index)}/>}\n      />\n      <div className={style.index}>{index + 1}</div>\n      <div>\n            {!editMode &&\n            <span onDoubleClick={activateEditMode} className={style.post}>{props.post}</span>\n            }{editMode &&\n      <TextField id=\"standard-basic\" color={\"secondary\"} onBlur={() => deactivateEditMode(task, index)} autoFocus={true}\n                 onChange={onTaskChange} value={task}></TextField>\n      }\n   </div>\n      </span>\n                <IconButton aria-label=\"delete\" onClick={() => removeToDo(props.id)}>\n                    <ButtonDeleteStyled fontSize=\"small\"/>\n                </IconButton>\n            </li>\n        </ul>\n    </>\n}\n\nexport default ListMaping;","import React from 'react';\nimport style from './List.module.css'\nimport {Field, reduxForm} from 'redux-form'\nimport ListMaping from './ListMaping'\nimport {ButtonStyled} from '../Common/StylesMaterial'\nimport {TextFieldStyled} from '../Common/StylesMaterial'\nimport logo from '../Common/mylogos.png'\n\n\nconst renderTextField = ({label, input, meta: {touched, invalid, error}, ...custom}) => {\n\n    return (<TextFieldStyled\n            label={label}\n            placeholder={label}\n            error={touched && invalid}\n            helperText={touched && error}\n            {...input}\n            {...custom}\n        />\n    )\n}\n\nlet ListForm = (props) => {\n\n    let postsElement = props.lists.map((p, index) =>\n\n        <div key={p.idOfPost}>\n            <ListMaping index={index} post={p.postInList} id={p.idOfPost} checked={p.checked}\n                        changeIndex={props.changeIndex} removeToDoAC={props.removeToDoAC}\n                        addPostToList={props.addPostToList} updateTask={props.updateTask}\n                        updateStatus={props.updateStatus}\n            />\n        </div>\n    );\n\n    const {handleSubmit, submitting} = props;\n\n    return (\n        <div>\n            <div><img src={logo} alt={'logo'} className={style.logo}/></div>\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label className={style.label}>Tasks to do:</label>\n                    {postsElement}\n\n                    <Field component={renderTextField} name={\"newPostText\"}\n                           id='custom-css-standard-input' label={'Your task'}/>\n                </div>\n                <ButtonStyled type=\"submit\" disabled={submitting}>ADD ITEM </ButtonStyled>\n            </form>\n        </div>\n    )\n}\n\nlet List = reduxForm({\n    form: 'newPostText',\n})(ListForm)\n\nexport default List;\n\n","import React, { useEffect } from 'react';\nimport List from './List'\nimport { useDispatch } from 'react-redux';\nimport {addPostToList, removeToDoAC, updateTask, setState, updateStatus} from '../BLL/ListReducer'\nimport {connect} from 'react-redux'\nimport {reset} from \"redux-form\"\n\n\nexport const ListContainer = (props) => {\n    const dispatch = useDispatch();\n\n    useEffect(()=>{\n        dispatch(setState())\n    }, [])\n\n    let submit = (values, dispatch) => {\n\n        values.newPostText && props.addPostToList(values.newPostText)\n        dispatch(reset('newPostText'));\n    }\n\n    return <List lists={props.lists} addPostToList={props.addPostToList}\n                 removeToDoAC={props.removeToDoAC} newPostText={props.newPostText}\n                 onSubmit={submit} updateTask={props.updateTask} updateStatus={props.updateStatus}\n    />\n}\n\nlet mapStateToProps = (state) => ({\n\n    lists: state.toDoList.lists,\n    newPostText: state.toDoList.newPostText\n})\n\nexport default connect(mapStateToProps,\n    {addPostToList, removeToDoAC, updateTask, setState, updateStatus})\n(ListContainer)\n\n","import React from 'react';\nimport './App.css';\nimport {Provider} from 'react-redux'\nimport store from '../src/BLL/redux-store'\nimport ListContainer from './List/ListContainer';\n\n\nfunction App(props) {\n\n    return (<>\n            <div className=\"App\">\n                <Provider store={store}>\n                    <header className=\"App-header\">\n                        <ListContainer/>\n                    </header>\n                </Provider>\n            </div>\n        </>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}