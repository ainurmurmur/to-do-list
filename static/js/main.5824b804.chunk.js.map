{"version":3,"sources":["BLL/ListReducer.jsx","BLL/redux-store.jsx","List/ListMaping.jsx","List/List.jsx","List/ListContainer.jsx","App.js","serviceWorker.js","index.js","List/List.module.css"],"names":["initialState","lists","idOfPost","postInList","done","ListReducer","state","action","type","newPost","newPostText","filter","newList","id","reducers","combineReducers","toDoList","form","formReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ListMaping","index","props","useState","notChecked","Checked","className","style","ul","cn","li","span","checkbox","checked","onChange","e","target","console","log","setChecked","post","delete","onClick","removeToDoAC","List","reduxForm","postsElement","map","p","key","changeToDone","changeIndex","handleSubmit","onSubmit","label","Field","name","component","validate","required","input","placeholder","submit","connect","addPostToList","ids","values","dispatch","reset","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.5824b804.chunk.js","sourcesContent":["\r\nconst ADD_POST =\"ADD_POST\" \r\nconst CHANGE_TO_DONE = 'CHANGE_TO_DONE'\r\nconst CHANGE_INDEX ='CHANGE_INDEX'\r\nconst REMOVE_TODO ='REMOVE_TODO'\r\nconst UPDATE_POST ='UPDATE_POST'\r\n\r\nlet initialState = {\r\n\r\n    lists: [{idOfPost: 1, postInList:\"Reading\", done: false},\r\n            {idOfPost: 2, postInList:\"Cooking\", done: false}],\r\n    \r\n}\r\n\r\nlet ListReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n\r\n        case ADD_POST: {\r\n            let newPost = {\r\n                idOfPost: 3, \r\n                postInList:action.newPostText, \r\n                done: false\r\n            }\r\n            return {...state, lists:[...state.lists, newPost] };\r\n        }\r\n        case UPDATE_POST: {\r\n            return {...state, newPostText: action.newPostText };\r\n        }\r\n        case REMOVE_TODO: {\r\n            //return state.lists.filter(newList => newList.idOfPost !== action.id)\r\n           return {...state, lists:[...state.lists.filter(newList => newList.idOfPost !== action.id)]};\r\n        }\r\n\r\n        default: \r\n            return state;\r\n    }\r\n}\r\n//console.log(action.id)\r\n\r\nexport const addPostToList = (newPostText, id) => ( {type: ADD_POST, newPostText, id} )\r\nexport const changeToDone = (ids) => ( {type: CHANGE_TO_DONE, ids} )\r\nexport const changeIndex = (index) => ( {type: CHANGE_INDEX, index} )\r\nexport const removeToDoAC = (id) => ( {type: REMOVE_TODO, id} )\r\n\r\n \r\nexport default ListReducer;\r\n\r\n\r\n // }\r\n        // case ADD_POST:\r\n        // case CHANGE_TO_DONE:\r\n        // case CHANGE_INDEX: {\r\n        //     let newPost = {\r\n        //         idOfPost: action.payload, \r\n        //         postInList:action.payload, \r\n        //         done: action.payload\r\n        //     };\r\n            \r\n        //     return {...state, lists:[...state.lists, newPost], };\r\n\r\n    // case CHANGE_TO_DONE: {\r\n    //     return {...state, lists:[...state.lists,  {done:action.payload}]  };\r\n\r\n    // }\r\n    // case CHANGE_INDEX: {\r\n    //     return {...state, lists:[...state.lists,  {idOfPost:action.payload}]  };\r\n\r\n    // }\r\n    // case ADD_POST: \r\n        // case CHANGE_INDEX: {\r\n        //     let newPost = {\r\n        //         idOfPost: action.index, \r\n        //         postInList:action.newPostText, \r\n        //         done: false\r\n        //     }\r\n        //     console.log(action.index)\r\n        //     return {...state, lists:[...state.lists, newPost] };\r\n        // }\r\n        // case ADD_POST: {\r\n        //     return {...state, lists:[...state.lists, { idOfPost:action.id, postInList: action.newPostText,  }]};\r\n        // }\r\n        // case CHANGE_TO_DONE: {\r\n        //     if(state.lists.idOfPost === action.id ){\r\n        //     let newPost = {\r\n        //         idOfPost: action.id, \r\n        //         postInList:'jk', \r\n        //         done: true\r\n        //     }\r\n        //     return {...state, lists:[...state.lists, newPost] };}\r\n        // }\r\n        // case CHANGE_TO_DONE: {\r\n        //     let stateCopy ={...state}\r\n        //     stateCopy.lists = [...state.lists]\r\n        //     stateCopy.lists.map( newList =>{\r\n        //         if ( state.lists.idOfPost === action.id ){\r\n        //             newList.done =!newList.done\r\n        //         }\r\n        //         return newList;\r\n        //     })\r\n        // } ","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { compose } from 'redux';\r\nimport  ListReducer  from './ListReducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nlet reducers = combineReducers({\r\n\r\n    toDoList: ListReducer,\r\n    form:formReducer\r\n});\r\n\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(reducers,  composeEnhancers(applyMiddleware(thunkMiddleware)));\r\n\r\n\r\n\r\nwindow.store =store;\r\nexport default store;\r\n\r\n// form:formReducer,","import React, { useState } from 'react';\nimport style from './List.module.css'\nimport cn from 'classnames'\nimport PropTypes from 'prop-types'\nimport { reset } from \"redux-form\";\n\nlet ListMaping = ({ index, ...props }) => {\n\n  let [notChecked, Checked] = useState(false);\n\n  const setChecked = (e) => {\n    Checked(e.target.checked)\n    console.log(notChecked)\n  }\n  const setCheckedId = (id) => {\n    props.changeToDone(id)\n    //console.log(id);\n  }\n  const setId =(index) => {\n    props.changeIndex(index)\n  }\n  const MyNewFunc = (isDone) => {\n    let doneOrNor = isDone\n  }\n  const removeToDo =(id) => {\n    props.removeToDoAC(id)\n  }\n  // console.log(props.id)\n  //(e) => { setChecked(e); setCheckedId(props.id); MyNewFunc(props.done)}\n// {props.addPostActionCreator(props.id)}\n  return <>\n  \n  <ul className={style.ul}>\n    <li className={cn(style.li, { [style.done]: notChecked === true })}>\n      <span className={style.span}>\n      <input className={style.checkbox}\n        type={\"checkbox\"}\n        checked={notChecked}\n        onChange={(e) => { setChecked(e) }}\n\n      />\n     \n      <div className={style.index}>{props.id = index + 1}</div>\n      <div className={style.post}>{props.post}</div>\n      </span>\n      <button className={style.delete} onClick={()=>removeToDo(props.id)}>&times;</button>\n  \n    </li>\n   \n  </ul>\n  </>\n}\n\nexport default ListMaping;\n\n\n// let [notChecked, Checked] = useState();\n\n\n\n// const setChecked = (e) => { \n//     Checked(e.target.checked)\n//     console.log(notChecked)\n// }   \n// const setCheckedId = (id ) => { \n\n//   props.changeToDone(id)\n//   console.log(id);\n// }  \n// const MyNewFunc = (isDone) => { \n//   let doneOrNor= isDone\n// } \n\n// //(e) => {setChecked(e);\n\n//   let postsElement = props.lists.map((p,index) =>\n//     <div key={p.id}  >\n//       <ul className={style.ul}>\n//         <li  className={ cn (style.li, {[style.done]:notChecked === true})}>\n//           <input className={style.checkbox}\n//                  type={\"checkbox\"} \n//                  checked={notChecked} \n//                  onChange={(e) => {  setChecked(e); setCheckedId(p.idOfPost); MyNewFunc(p.done)}}\n\n//                  /> \n\n//                  {p.idOfPost = index+1}\n//                  {p.postInList}\n\n//         </li>\n//       </ul>\n//     </div>\n//   );\n\n\n//   const { handleSubmit } = props\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <div>\n//         <label>Tasks to do</label>\n\n//         {postsElement}\n\n//         <Field name={\"newPostText\"} component={\"input\"} type={\"text\"} />\n//       </div>\n//       <button type={\"submit\"}  >Add Item</button>\n//     </form>\n//   )\n// }\n\n// let List = reduxForm({\n//   form: 'newPostText'\n// })(ListForm)\n//let classes = [];\n\n// let setChecked = ({ target: { checked } } )=> {\n//   Checked(checked);\n//   console.log(notChecked, checked);\n\n// };\n\n// const [checked, setChecked] = useState(true);\n// return (\n//   <div>\n//     <label>\n//       <MixedCheckbox\n//         value=\"whatever\"\n//         checked={checked}\n//         onChange={(event) => {\n//           setChecked(event.target.checked);\n//         }}\n\n//  const setChecked = ({ target: { checked } } ) => { \n\n//   (event) => {\n//     Checked(event.target.checked)\n\n//   Checked(checked);\n//   console.log(notChecked, checked);\n\n\n\n\n// return <span className={ cn({[classes.selectedPage]:props.currentPage === p},classes.pageNumber ) } onClick={(e) => { props.onPageChange(p) } }>{p}</span>\n\n// const [x, setX] = useState(false);\n\n// const soldCheckbox = ({ target: { checked } }) => {\n//   console.log(x, checked);\n//   setX(checked);\n// };\n\n//   <div>\n//     <input type=\"checkbox\" checked={x} onChange={soldCheckbox} />\n//   </div>\n\n// if (checked) { \n//   classes.push('done')\n// }\n// props.lists.map((checkedPost) => (  {checkedPost.done} );\n\n\n{/* <span>{index+1}</span> */ }\n{/* onChange={props.lists.idOfPost}/> */ }\n{/* <IndexFromSpan index={index}/> */ }\n  // let IndexFromSpan =({index}) => {\n  //   return (<span>{index+1}</span>)\n  // }\n  // let indexNew = (index) => {\n  //   props.changeIndex(index)\n  // }\n //className={style.li}  className={ style.done }\n  //className={style.li}\n  //className={classes.join(' ')\n\n//onSubmit={handleSubmit}\n\n// const List = reduxForm({\n//   form: 'edit-profile'\n// })(ListReduxForm);\n\n//{createField('listItem', 'Place your Item here', Input)}\n\n// const List = (props) => {\n\n\n// let postsElement = props.lists.map((p) =>  \n//       <div key={p.id}>\n//       <b className={style.text}>{p.postInList} </b></div>\n//        );\n\n//   let onPostChange = (e) => {\n//     let newPostText= e.currentTarget.value;\n//     props.addPostToList(newPostText)\n\n//   }\n\n//   return <>\n//       <div>\n\n//       {postsElement}\n//       <form >\n//       <input  onChange={onPostChange}  placeholder='Write your Item'   value ={props.newPostText} />\n//        <button > Send </button>\n//        </form>\n//        </div>\n//   </>\n\n// }","import React, {useState} from 'react';\nimport style from './List.module.css'\nimport { Field, reduxForm, submit } from 'redux-form'\nimport cn from 'classnames'\nimport ListMaping from './ListMaping'\nimport PropTypes from 'prop-types'\nimport {required} from 'redux-form-validators'\nimport { reset } from \"redux-form\";\n\n\nlet ListForm = (props) => {\n\n\n  \n  \n//(e) => {setChecked(e);\n\n  let postsElement = props.lists.map((p,index) =>\n    \n    \n    <div key={p.idOfPost}  >\n      <ListMaping index={index} post={p.postInList} id={p.idOfPost} \n                  done={p.done} changeToDone={props.changeToDone}\n                  changeIndex={props.changeIndex} removeToDoAC={props.removeToDoAC}\n                  />\n    </div>\n  );\n        \n \n  //<form onSubmit={e => this.onSubmit(e, patient._id)}>\n  const { handleSubmit} = props\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label className={style.label}>Tasks to do:</label>\n\n        {postsElement}\n\n        <Field name={\"newPostText\"} component={\"input\"} type={\"text\"} validate={[required()]} className={style.input} placeholder={'Your task'}/>\n      </div>\n      <button type={\"submit\"}  className={style.submit}>Add Item</button>\n    </form>\n  )\n}\n\nlet List = reduxForm({\n  form: 'newPostText'\n})(ListForm)\n\n\nexport default List;\n//let classes = [];\n\n  // let setChecked = ({ target: { checked } } )=> {\n  //   Checked(checked);\n  //   console.log(notChecked, checked);\n  \n  // };\n\n  // const [checked, setChecked] = useState(true);\n  // return (\n  //   <div>\n  //     <label>\n  //       <MixedCheckbox\n  //         value=\"whatever\"\n  //         checked={checked}\n  //         onChange={(event) => {\n  //           setChecked(event.target.checked);\n  //         }}\n\n//  const setChecked = ({ target: { checked } } ) => { \n  \n//   (event) => {\n//     Checked(event.target.checked)\n\n//   Checked(checked);\n//   console.log(notChecked, checked);\n  \n\n\n\n// return <span className={ cn({[classes.selectedPage]:props.currentPage === p},classes.pageNumber ) } onClick={(e) => { props.onPageChange(p) } }>{p}</span>\n\n  // const [x, setX] = useState(false);\n\n  // const soldCheckbox = ({ target: { checked } }) => {\n  //   console.log(x, checked);\n  //   setX(checked);\n  // };\n\n  //   <div>\n  //     <input type=\"checkbox\" checked={x} onChange={soldCheckbox} />\n  //   </div>\n\n  // if (checked) { \n  //   classes.push('done')\n  // }\n  // props.lists.map((checkedPost) => (  {checkedPost.done} );\n\n\n {/* <span>{index+1}</span> */}\n  {/* onChange={props.lists.idOfPost}/> */}\n            {/* <IndexFromSpan index={index}/> */}\n  // let IndexFromSpan =({index}) => {\n  //   return (<span>{index+1}</span>)\n  // }\n  // let indexNew = (index) => {\n  //   props.changeIndex(index)\n  // }\n //className={style.li}  className={ style.done }\n  //className={style.li}\n  //className={classes.join(' ')\n\n//onSubmit={handleSubmit}\n\n// const List = reduxForm({\n//   form: 'edit-profile'\n// })(ListReduxForm);\n\n//{createField('listItem', 'Place your Item here', Input)}\n\n// const List = (props) => {\n\n\n// let postsElement = props.lists.map((p) =>  \n//       <div key={p.id}>\n//       <b className={style.text}>{p.postInList} </b></div>\n//        );\n\n//   let onPostChange = (e) => {\n//     let newPostText= e.currentTarget.value;\n//     props.addPostToList(newPostText)\n\n//   }\n\n//   return <>\n//       <div>\n\n//       {postsElement}\n//       <form >\n//       <input  onChange={onPostChange}  placeholder='Write your Item'   value ={props.newPostText} />\n//        <button > Send </button>\n//        </form>\n//        </div>\n//   </>\n\n// }","import React from 'react';\r\nimport List from './List'\r\nimport ListTwo from './List2'\r\nimport { addPostToList, changeToDone, changeIndex, removeToDoAC } from '../BLL/ListReducer'\r\nimport { connect } from 'react-redux'\r\nimport { reset } from \"redux-form\"\r\n// import { withRouter } from 'react-router-dom';\r\n// import {compose} from 'redux'\r\n\r\n\r\nexport const ListContainer = (props) => {\r\n\r\n  \r\n\r\n  let submit = (values, dispatch, ) => {\r\n\r\n    props.addPostToList(values.newPostText)\r\n    dispatch(reset('newPostText'));\r\n  }\r\n  \r\n\r\n  return <List lists={props.lists} addPostToList={props.addPostToList} changeIndex={props.changeIndex}\r\n    changeToDone={props.changeToDone}  removeToDoAC= {props.removeToDoAC} newPostText={props.newPostText}\r\n    onSubmit={submit}\r\n  />\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n\r\n  lists: state.toDoList.lists,\r\n  newPostText: state.toDoList.newPostText\r\n})\r\n\r\nexport default connect(mapStateToProps, { addPostToList, changeToDone, changeIndex, removeToDoAC })(ListContainer)\r\n//onSubmit={onSubmit}\r\n","import React from 'react';\nimport './App.css';\n//import  List  from './List/List';\n// import { withRouter } from 'react-router-dom';\n// import { compose } from 'redux'\nimport { Provider } from 'react-redux'\nimport store from '../src/BLL/redux-store'\nimport ListContainer from './List/ListContainer';\n\n\nfunction App(props) {\n\n  return (<>\n    <div className=\"App\">\n\n        <Provider store={store}>\n        <header className=\"App-header\">\n          <ListContainer />\n        </header>\n      </Provider>\n\n    </div >\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"li\":\"List_li__2JXXT\",\"label\":\"List_label__1r1xI\",\"input\":\"List_input__39Dga\",\"submit\":\"List_submit__rRuSv\",\"span\":\"List_span__DR7jK\",\"ul\":\"List_ul__2Iprr\",\"checkbox\":\"List_checkbox__3poBb\",\"done\":\"List_done__39dvZ\",\"delete\":\"List_delete__4VRRG\",\"index\":\"List_index__6EI6F\",\"post\":\"List_post__3SKfM\"};"],"sourceRoot":""}